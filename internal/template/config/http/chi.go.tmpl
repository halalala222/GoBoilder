package config

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	"{{.ModulePath}}/internal/log"
	logger "{{.ModulePath}}/pkg/log"
)

func NewChiRouter() *chi.Mux {
	r := chi.NewRouter()

	// Custom Logger Middleware
	r.Use(middleware.Logger)

	// Recovery Middleware
	r.Use(middleware.Recoverer)

	return r
}

func CloseServer(srv *http.Server) {
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGKILL, syscall.SIGTERM)
	<-quit
	log.Log().Info("Shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctx); err != nil {
		log.Log().Fatal("Server forced to shut down", logger.Field{Key: "error", Value: err})
	}
	log.Log().Info("Server exited")
}
