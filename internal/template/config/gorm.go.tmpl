package config

import (
	"context"
	"fmt"
	"io"
	"log"
	"os"
	"sync"
	"time"

	"github.com/spf13/viper"
    {{ if eq .DB "mysql" }}"gorm.io/driver/mysql" {{else if eq .DB "postgres" }}"gorm.io/driver/postgres"{{ else if eq .DB "sqlite" }}"gorm.io/driver/sqlite"{{ end }}
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
	"gorm.io/gorm/schema"

	"{{.ModulePath}}/consts"
	pkgLog "{{.ModulePath}}/internal/pkg/log"
	pkgLogger "{{.ModulePath}}/pkg/log"
)

var (
	db     *gorm.DB
	dbOnce sync.Once
)

{{ if eq .DB "mysql" }}
func getGormDialector() gorm.Dialector {
	return mysql.New(mysql.Config{
		DSN: fmt.Sprintf(viper.GetString("mysql.incu.dsn"), viper.GetString("INCU_PASSWORD")),
	})
}
{{ else if eq .DB "postgres" }}
func getGormDialector() gorm.Dialector {
    return postgres.New(postgres.Config{
        DSN: fmt.Sprintf(viper.GetString("postgres.incu.dsn"), viper.GetString("INCU_PASSWORD")),
    })
}
{{ else if eq .DB "sqlite" }}
func getGormDialector() gorm.Dialector {
    return sqlite.Open(viper.GetString("sqlite.incu.dsn"))
}
{{ else }}
func getGormDialector() gorm.Dialector {
    panic("unknown db")
}
{{ end }}

func DB(ctx context.Context) *gorm.DB {
	dbOnce.Do(func() {
		var err error
		if db, err = gorm.Open(getGormDialector(), &gorm.Config{
			Logger:      getGormLogger(),
			PrepareStmt: true,
			NamingStrategy: schema.NamingStrategy{
				SingularTable: true,
			},
		}); err != nil {
			panic(err)
		}
	})
	return db.WithContext(ctx)
}

func getGormLogger() logger.Interface {
	ignoreRecordNotFound := false
	logLevel := logger.Info
	if !viper.GetBool("debug") {
		ignoreRecordNotFound = true
		logLevel = logger.Error
	}
	logFile, err := os.OpenFile(consts.DefaultSQLLogFilePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		panic(err)
	}
	multiOutput := io.MultiWriter(os.Stdout, logFile)
	return logger.New(
		log.New(multiOutput, "[DB] ", log.LstdFlags),
		logger.Config{
			SlowThreshold:             time.Second,
			LogLevel:                  logLevel,
			IgnoreRecordNotFoundError: ignoreRecordNotFound,
			Colorful:                  false,
		},
	)
}

func CloseDB() {
	sqlDB, err := db.DB()
	if err != nil {
		pkgLog.Log().Error("get sql db error", pkgLogger.Field{Key: "err", Value: err})
	}
	if err = sqlDB.Close(); err != nil {
		pkgLog.Log().Error("sql db close error", pkgLogger.Field{Key: "err", Value: err})
	}
}
