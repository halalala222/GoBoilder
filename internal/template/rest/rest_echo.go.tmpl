package rest

import (
	"context"
	"errors"
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"

	"{{ .ModulePath }}/domain"
)

// ResponseError represent the response error struct
type ResponseError struct {
	Message string `json:"message"`
}

// UserService represent the article's usecases
//
//go:generate mockery --name UserService
type UserService interface {
	GetUserByUserID(ctx context.Context, userID int64) (*domain.User, error)
}

// UserHandler  represent the httphandler for article
type UserHandler struct {
	Service UserService
}

// NewUserHandler will initialize the articles/ resources endpoint
func NewUserHandler(e *echo.Echo, svc UserService) {
	handler := &UserHandler{
		Service: svc,
	}
	e.GET("/users/:id", handler.GetUserByUserID)
}

// GetUserByUserID will get user by given user id
func (a *UserHandler) GetUserByUserID(c echo.Context) error {
	userID, err := strconv.ParseInt(c.Param("id"), 10, 64)
	if err != nil {
		return c.JSON(getStatusCode(err), ResponseError{Message: err.Error()})
	}

	ctx := c.Request().Context()
	if ctx == nil {
		ctx = context.Background()
	}

	user, err := a.Service.GetUserByUserID(ctx, userID)
	if err != nil {
		return c.JSON(getStatusCode(err), ResponseError{Message: err.Error()})
	}

	return c.JSON(http.StatusOK, user)
}

func getStatusCode(err error) int {
	if err == nil {
		return http.StatusOK
	}

	switch {
	case errors.Is(err, domain.ErrInternalServerError):
		return http.StatusInternalServerError
	case errors.Is(err, domain.ErrNotFound):
		return http.StatusNotFound
	case errors.Is(err, domain.ErrConflict):
		return http.StatusConflict
	default:
		return http.StatusInternalServerError
	}
}
