package mongodb

import (
    "context"
    "errors"

    "go.mongodb.org/mongo-driver/mongo"
    "go.mongodb.org/mongo-driver/bson"

    "{{.ModulePath}}/domain"
)

const (
    database = "test"
    collection = "test"
)

type UserRepository struct {
	collection *mongo.Collection
}

// NewUserRepository will create an object that represent the user.Repository interface
func NewUserRepository(db *mongo.Client) *UserRepository {
    return &UserRepository{
        collection: db.Database(database).Collection(collection),
    }
}

// GetUserByUserID will get user by userID
func (u *UserRepository) GetUserByUserID(ctx context.Context, userID int64) (*domain.User, error) {
    var (
        user *domain.User
        err  error
        filter = bson.M{"_id": userID}
    )

    err = u.collection.FindOne(ctx, filter).Decode(&user)

    if err != nil && errors.Is(err, mongo.ErrNoDocuments) {
        return &domain.User{}, nil
    }

    return user, err
}
